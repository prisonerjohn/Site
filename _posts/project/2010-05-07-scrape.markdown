---
layout:	project
categories:
- project
title: "Scrape"
img: scrape-main.jpg
thumb: scrape-thumb.jpg
links:
- "[Project Site](http://www.silentlycrashing.net/scrape)"
iframe: '<img src="/assets/img/project/scrape-banner.jpg" width="945" height="531" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></img>'
carousel:
- scrape-01.jpg
- scrape-02.jpg
- scrape-03.jpg
- scrape-04.jpg
- scrape-05.jpg
tags:
- experimental
- graphics
- glitch
- print
---
An exploration of information privacy focusing on the graphical data that is left behind on a computer.

Anytime a computer application renders an image, it reserves a chunk of memory from the graphics card and fills it with information which is then drawn to the screen. The memory is released once this operation is complete, but its contents are not erased. This is because each application assumes that whoever will next reserve this memory will overwrite it with its own data.

Scrape works by reserving some memory and reading its contents without writing anything to it first, thus collecting traces left behind by recently used programs.

Color, which is displayed as pixels on screen, is the data that Scrape collects. Because it can be coded in many different pixel formats, this data must be interpreted before being used.

The pixel format is not indicated anywhere in the graphics card as it is up to the application to set it and interpret the data accordingly. Scrape therefore represents the contents of the graphics card in all possible ways. Each cluster of data will be properly represented in one interpretation, and displayed in a corrupt state in the others. The juxtaposition of correct and incorrect renditions creates the grid-like arrangement of information generated by Scrape.

{% include carousel.html %}
